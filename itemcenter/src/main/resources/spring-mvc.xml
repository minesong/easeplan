<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">



    <mvc:interceptors>
        <mvc:interceptor>
            <!-- 进行拦截：/**表示拦截所有controller -->
            <mvc:mapping path="/**"/>
            <!-- 不进行拦截 -->
            <mvc:exclude-mapping path="/content/showContent"/>
            <!--    <mvc:exclude-mapping path="/user/loginskip"/>
                <mvc:exclude-mapping path="/user/login"/>-->
            <mvc:exclude-mapping path="/welcome.jsp"/>
            <bean class="com.ease.utils.LoginInterceptor"/>
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.ease.utils.AccessAuthorityInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>
    <!-- 自动扫描  @Controller-->
    <context:component-scan base-package="com.ease.controller"/>
    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter"/> <!-- JSON转换器 -->
            </list>
        </property>
    </bean>


    <!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 文件上传配置 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="UTF-8"/>
        <!-- 上传文件大小限制为31M，31*1024*1024 -->
        <property name="maxUploadSize" value="32505856"/>
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="4096"/>
    </bean>


    <!-- 配置校验器 -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <!-- 校验器，使用hibernate校验器 -->
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下面的ValidationMessages.properties文件 -->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>
    <!-- 校验错误信息配置文件 -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <!-- 资源文件名 -->
        <property name="basenames">
            <list>
                <value>classpath:CustomValidationMessage</value>
            </list>
        </property>
        <!-- 资源文件编码格式 -->
        <property name="fileEncodings" value="utf-8"/>
        <!-- 对资源文件内容缓存时间，单位秒 -->
        <property name="cacheSeconds" value="120"/>
  </bean>
    <!--   2 使用ConversionService及自定义转换器
     如果只是使用spring自带的的转换器，只需要如下配置即可：
     <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean"/>
     如果需要注册自己实现的转换器，则需要通过以下方式进行配置:
     <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
         <property name="converters">
             <list>
                 <bean class="com.serverside.EncryptedKeyToBankAccountConverter" />
             </list>
         </property>
     </bean>
     如上配置之后，使用conversionService即可以转换自己想要转换的S和T。如下的代码所示：
     //bean 对象
     public class BankCustomer {
     BankAccount checkingAccount;

     public void setCheckingAccount(BankAccount checkingAccount) {
     this.checkingAccount = checkingAccount;
     <bean id="bankCustomer" class="com.serverside.convertertips.BankCustomer" scope="session">
         <property name="checkingAccount" value="67dsdh8673hnkluye3nd38dn4j78vbn3"/>
     </bean>-->
   <!--必须添加这个bean 不然报错-->
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean"/>
    <!--  增加<mvc:default-servlet-handler/>，只能访问jsp和静态文件，访问action则报404错误 -->
    <mvc:default-servlet-handler/>
    <!--再增加如下配置-->
    <mvc:annotation-driven conversion-service="conversionService" validator="validator"/>
</beans>